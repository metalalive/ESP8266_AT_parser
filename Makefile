##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.0.0] date: [Tue Apr 16 00:40:52 CST 2019]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#
# ------------------------------------------------

######################################
# target
######################################
TARGET = FreeRTOS-ESP8266-AT-lib


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og

OPENOCD_HOME?=/PATH/TO/YOUR_OPENOCD_INSTALL
OS_NAME?=FreeRTOS
PLATFORM?=STM32F4

#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Src/ESP_AT_parser/src/api/esp_misc.c    \
Src/ESP_AT_parser/src/api/esp_ping.c    \
Src/ESP_AT_parser/src/api/esp_sta.c     \
Src/ESP_AT_parser/src/api/esp_ap.c      \
Src/ESP_AT_parser/src/api/esp_conn.c    \
Src/ESP_AT_parser/src/esp/esp.c         \
Src/ESP_AT_parser/src/esp/esp_cmd.c     \
Src/ESP_AT_parser/src/esp/esp_recv_buf.c  \
Src/ESP_AT_parser/src/esp/esp_parser.c    \
Src/ESP_AT_parser/src/esp/esp_pktbuf.c    \
Src/ESP_AT_parser/src/esp/esp_util.c      \
Src/ESP_AT_parser/src/esp/esp_thread.c 



# ASM sources
ASM_SOURCES = 

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  

# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IInc \
-ISrc/ESP_AT_parser/inc


#### include hardware platfrom specific files
include  ./auto/platform/makefile.$(PLATFORM).inc 
#### include OS-specific files
include  ./auto/os/makefile.$(OS_NAME).inc 




#######################################
# binaries
#######################################
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(C_TOOLCHAIN_PREFIX)gcc
AS = $(GCC_PATH)/$(C_TOOLCHAIN_PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(C_TOOLCHAIN_PREFIX)objcopy
SZ = $(GCC_PATH)/$(C_TOOLCHAIN_PREFIX)size
DUMP = $(GCC_PATH)/$(C_TOOLCHAIN_PREFIX)objdump
else
CC = $(C_TOOLCHAIN_PREFIX)gcc
AS = $(C_TOOLCHAIN_PREFIX)gcc -x assembler-with-cpp
CP = $(C_TOOLCHAIN_PREFIX)objcopy
SZ = $(C_TOOLCHAIN_PREFIX)size
DUMP = $(C_TOOLCHAIN_PREFIX)objdump
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 




#### ------------------------------------------------------------------
#### ---- different files & paths for unit test, integration test -----
#### ------------------------------------------------------------------
ifeq ($(UNIT_TEST), yes) 
# TODO: complete unit test after completing integration tests.
else
    ifeq ($(INTEGRATION_TEST), yes)
        C_SOURCES += \
            Src/tests/testlogger.c \
            Src/Third_Party/Unity/src/unity.c \
            Src/Third_Party/Unity/extras/fixture/src/unity_fixture.c \
            Src/tests/integration/ESP_AT_parser/common.c                \
            Src/tests/integration/ESP_AT_parser/connect_ap_ping.c       \
            Src/tests/integration/ESP_AT_parser/http_server.c           \
            Src/tests/integration/ESP_AT_parser/mqtt_client.c           \
            Src/tests/integration/ESP_AT_parser/mqtt/mqtt_client_conn.c	\
            Src/tests/integration/ESP_AT_parser/mqtt/mqtt_packet.c      \
            Src/tests/integration/ESP_AT_parser/mqtt/mqtt_sys.c         \
            Src/tests/integration/ESP_AT_parser/test_runner.c           \
            Src/tests/integration/integration_test_entry.c           
        C_INCLUDES += \
            -ISrc/Third_Party/Unity/src \
            -ISrc/Third_Party/Unity/extras/fixture/src
        C_DEFS += -DINTEGRATION_TEST
        ifeq ($(TESTNAME), ping)
            C_DEFS += -DESP_TEST_PING
        else
            ifeq ($(TESTNAME), http_server)
                C_DEFS += -DESP_TEST_HTTP_SERVER 
            else
                ifeq ($(TESTNAME), mqtt_client)
                    C_DEFS += -DESP_TEST_MQTT_CLIENT 
                endif #### end of TESTNAME
            endif #### end of TESTNAME
        endif #### end of TESTNAME
    else
        C_SOURCES += Src/main.c 
    endif #### end of INTEGRATION_TEST
endif #### end of UNIT_TEST




# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -Wint-to-pointer-cast

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).text $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR)/%.text: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(DUMP) -Dh $< > $@

$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)



#######################################
# execute/debug in the tests
#######################################
dbg_server:
	@openocd  $(OPENOCD_CFG_FILES)  -c init -c "reset init"

dbg_client:
	@gdb-multiarch -x ./test_utility.gdb

#######################################
# help documentation
#######################################
help:
	@echo "                                                      ";
	@echo " ---------------- Help Documentation -----------------";
	@echo "                                                      ";
	@echo " Options for building image, running, and debugging   ";
	@echo "                                                      ";

	@echo " * make INTEGRATION_TEST=yes TESTNAME=<test_name> OS_NAME=<os_name>  PLATFORM=<hw_platform_name> ";
	@echo "   Build image to run specified integration tests.    ";
	@echo "   where <test_name> can be 'ping', 'http_server', or ";
	@echo "   'mqtt_client'                                      ";
	@echo "                                                      ";
	@echo "   <os_name> : ";
	@echo "   so far we only integrate FreeRTOS to the ESP parser";
	@echo "   please refer to src/system/esp_system_freertos.c   ";
	@echo "   in order to port the ESP AT parser within your OS. ";
	@echo "                                                      ";
	@echo "   <hw_platform_name> : ";
	@echo "   so far this ESP parser is verified in STM32F4xx board, ";
	@echo "   in other words, ARM Cortex-M4 MCU platform, the default";
	@echo "   value is \"STM32F4\", but anyone is welcome to contribute  ";
	@echo "   to this repository with other hardware platforms that ";
	@echo "   haven't been implemented. ";
	@echo "                                                      ";
	@echo " * make dbg_server OPENOCD_HOME=/PATH/TO/YOUR_OPENOCD ";
	@echo "   launch debug server, we use OpenOCD (v0.10.0) here ";
	@echo "   . Note that superuser permission would be required ";
	@echo "   when running openOCD, the command differs & depends";
	@echo "   on your working Operating System.                  ";
	@echo "                                                      ";
	@echo " * make dbg_client                                    ";
	@echo "   launch GDB client to load image, set breakpoints,  ";
	@echo "   watchpoints for execution. We use gdb-multiarch    ";
	@echo "   (v7.7.1 or later) at here.                         ";
	@echo "                                                      ";
	@echo " * make clean                                         ";
	@echo "   clean up the built image                           ";
	@echo "                                                      ";
	@echo "                                                      ";


# *** EOF ***
